# -*- coding: utf-8 -*-
"""Plotting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQRznmw4tQw0RotYVDYnht-nLWgSX-T5
"""

import numpy as np
import matplotlib.pyplot as plt

def plotting(centres):
    '''
    Allocated to/Completed By: Brayden 
    
    Inputs: 
    Centroids          - this is (n,24) np array for some integer n that cannot be specified further
    Outputs:
    None
    Used to generate and display (and eventually save) a plot of overlapping profiles to determine if they are meaningful/useful
    '''

    #Initiating the variables
    [rows,cols] = np.shape(centres)
    x = np.arange(0,24)

    #Plotting
    for i in range(0,rows):
      plt.plot(x, centres[i],label = f'{i}')
    plt.legend()
    plt.title("Indicative use for each cluster")
    plt.xlabel("Time of Day in Local time (24 hr)")
    plt.ylabel("Usage (Wh)")
    plt.savefig("Image.png")

    return None

def get_cost(net_u, time, season):
    '''
    To be clarified
    Allocated to/Completed By: Brayden

    Note: Work in Watt Hours not Kilowatt hours

    Inputs: 
    Local_time    -   number corresponding to the start of the hour
    net_usage     -   number +ive or -ive (-ive makes money)
    ToU_season.   -   's','w','o'(summer, winter, other)
    Outputs:
    cost          - A single number describing an indicative days energy cost
    A function that depends on 'get_net_usage' and 'ToU tariff' functions/models and 
    '''
    # $/Wh
    off_peak_rate = 0.1223 * 10**-3
    peak_rate = 0.3622 * 10**-3
    shoulder_rate = 0.1498 * 10 **-3

    feed_in_cost = 0.15 * 10**-3

    if net_u < 0:
      cost = abs(net_u * feed_in_cost)
      return cost


    elif (season == "s" or season == "w") and 14 < time <= 20:
      cost = net_u * peak_rate
    elif (season == "s" or season == "w") and (7 < time <= 14 or 20 < time < 22):
      cost = net_u * shoulder_rate
    elif (season == "o" and 7 < time <= 22):
      cost = net_u * shoulder_rate
    else:
      cost = net_u * off_peak_rate

    return cost